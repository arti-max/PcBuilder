import os
import sys
import argparse
from datetime import datetime
from Lexer import Lexer
from Parser import Parser
from Compiler import Compiler, TapeFormat

class Assembler:
    def __init__(self):
        self.lexer = None
        self.parser = None
        self.compiler = Compiler()
    
    def assemble_file(self, filename, output_type="bin", output_path=None, metadata=None):
        """
        –ê—Å—Å–µ–º–±–ª–∏—Ä—É–µ—Ç —Ñ–∞–π–ª —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –≤—ã–≤–æ–¥–∞
        
        Args:
            filename: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É .asm
            output_type: "bin", "tape", "both"
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            metadata: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è TAPE —Ñ–∞–π–ª–∞
        """
        if not os.path.exists(filename):
            raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}")
        
        with open(filename, 'r', encoding='utf-8') as f:
            source_code = f.read()
        
        return self.assemble_string(source_code, output_type, output_path, metadata)
    
    def assemble_string(self, source_code, output_type="bin", output_path=None, metadata=None):
        """
        –ê—Å—Å–µ–º–±–ª–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∫–æ–¥–æ–º
        
        Args:
            source_code: –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –Ω–∞ –∞—Å—Å–µ–º–±–ª–µ—Ä–µ
            output_type: "bin", "tape", "both" 
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            metadata: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è TAPE —Ñ–∞–π–ª–∞
        """
        print(" –ù–∞—á–∞–ª–æ –∞—Å—Å–µ–º–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        # –õ–µ–∫—Å–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
        print(" –õ–µ–∫—Å–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑...")
        self.lexer = Lexer(source_code)
        tokens = self.lexer.tokenize()
        print(f"   –ù–∞–π–¥–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {len(tokens)}")
        
        # –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
        print("  –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑...")
        self.parser = Parser(tokens)
        statements = self.parser.parse()
        print(f"   –ù–∞–π–¥–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {len(statements)}")
        
        # –ö–æ–º–ø–∏–ª—è—Ü–∏—è
        print("  –ö–æ–º–ø–∏–ª—è—Ü–∏—è...")
        binary_data = self.compiler.compile(statements)
        print(f"   –†–∞–∑–º–µ—Ä –∫–æ–¥–∞: {len(binary_data)} –±–∞–π—Ç")
        
        if self.compiler.org_address != 0:
            print(f"   –ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: 0x{self.compiler.org_address:04X}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        results = {}
        
        if output_type in ["bin", "both"]:
            print(" –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ BIN —Ñ–∞–π–ª–æ–≤...")
            self.compiler.save_to_files(binary_data, output_path)
            results["bin"] = binary_data
            print(f"    BIN —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_path}/")
        
        if output_type in ["tape", "both"]:
            print(" –°–æ–∑–¥–∞–Ω–∏–µ TAPE —Ñ–∞–π–ª–∞...")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            if metadata is None:
                metadata = {
                    'name': 'Assembled Program',
                    'author': 'PC Builder',
                    'description': 'Auto-generated'
                }
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –¥–ª—è TAPE —Ñ–∞–π–ª–∞
            if output_path is None:
                os.makedirs("asm/tapes", exist_ok=True)
                tape_path = "asm/tapes/program.tape"
            else:
                tape_path = output_path
                if not tape_path.endswith('.tape'):
                    tape_path += '.tape'
            
            tape_data = self.compiler.save_to_tape(binary_data, tape_path, metadata)
            results["tape"] = {"path": tape_path, "data": tape_data}
            print(f"    TAPE —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {tape_path}")
        
        print(" –ê—Å—Å–µ–º–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return results
    
    def get_program_info(self, binary_data):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        info = {
            "size": len(binary_data),
            "load_address": self.compiler.org_address,
            "machine_code": [f"0x{b:02X}" for b in binary_data[:20]]  # –ü–µ—Ä–≤—ã–µ 20 –±–∞–π—Ç
        }
        
        if len(binary_data) > 20:
            info["machine_code"].append("...")
        
        return info

def create_metadata_from_args(args):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    return {
        'name': args.name or 'Assembled Program',
        'author': args.author or 'PC Builder',
        'description': args.description or f'Assembled on {datetime.now().strftime("%Y-%m-%d %H:%M")}'
    }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description='PC Builder Assembler - –ê—Å—Å–µ–º–±–ª–µ—Ä –¥–ª—è 8-–±–∏—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python assembler.py program.asm                    # –ö–æ–º–ø–∏–ª—è—Ü–∏—è –≤ BIN
  python assembler.py program.asm --tape             # –ö–æ–º–ø–∏–ª—è—Ü–∏—è –≤ TAPE
  python assembler.py program.asm --both             # –ö–æ–º–ø–∏–ª—è—Ü–∏—è –≤ BIN –∏ TAPE
  python assembler.py program.asm --tape --name "My Program" --author "Developer"
  python assembler.py --interactive                  # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        """
    )
    
    parser.add_argument('input', nargs='?', help='–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª .asm')
    parser.add_argument('--tape', action='store_true', help='–ö–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å –≤ TAPE —Ñ–∞–π–ª')
    parser.add_argument('--both', action='store_true', help='–ö–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å –≤ BIN –∏ TAPE')
    parser.add_argument('--output', '-o', help='–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞')
    parser.add_argument('--name', help='–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã (–¥–ª—è TAPE)')
    parser.add_argument('--author', help='–ê–≤—Ç–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã (–¥–ª—è TAPE)')
    parser.add_argument('--description', help='–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã (–¥–ª—è TAPE)')
    parser.add_argument('--interactive', '-i', action='store_true', help='–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º')
    parser.add_argument('--info', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ')
    
    args = parser.parse_args()
    
    assembler = Assembler()
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    if args.interactive:
        print("üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –∞—Å—Å–µ–º–±–ª–µ—Ä–∞ PC Builder")
        print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –Ω–∞ –∞—Å—Å–µ–º–±–ª–µ—Ä–µ (Ctrl+D –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è):")
        print("=" * 50)
        
        try:
            source_lines = []
            while True:
                try:
                    line = input()
                    if line.strip() == "EOF":
                        break
                    source_lines.append(line)
                except EOFError:
                    break
            
            source_code = "\n".join(source_lines)
            
            if source_code.strip():
                print("\n" + "=" * 50)
                metadata = {
                    'name': 'Interactive Program',
                    'author': 'Interactive User',
                    'description': f'Created interactively on {datetime.now().strftime("%Y-%m-%d %H:%M")}'
                }
                
                results = assembler.assemble_string(source_code, "both", None, metadata)
                
                if args.info and "bin" in results:
                    info = assembler.get_program_info(results["bin"])
                    print(f"\n –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ:")
                    print(f"   –†–∞–∑–º–µ—Ä: {info['size']} –±–∞–π—Ç")
                    print(f"   –ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: 0x{info['load_address']:04X}")
                    print(f"   –ú–∞—à–∏–Ω–Ω—ã–π –∫–æ–¥: {' '.join(info['machine_code'])}")
            else:
                print(" –ö–æ–¥ –Ω–µ –≤–≤–µ–¥–µ–Ω")
                
        except KeyboardInterrupt:
            print("\n –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞: {e}")
            return
    
    # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
    elif args.input:
        try:
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –≤—ã–≤–æ–¥–∞
            if args.both:
                output_type = "both"
            elif args.tape:
                output_type = "tape"
            else:
                output_type = "bin"
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            metadata = create_metadata_from_args(args) if output_type in ["tape", "both"] else None
            
            # –ê—Å—Å–µ–º–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            results = assembler.assemble_file(args.input, output_type, args.output, metadata)
            
            # –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            if args.info and "bin" in results:
                info = assembler.get_program_info(results["bin"])
                print(f"\n –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ:")
                print(f"   –†–∞–∑–º–µ—Ä: {info['size']} –±–∞–π—Ç")
                print(f"   –ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: 0x{info['load_address']:04X}")
                print(f"   –ú–∞—à–∏–Ω–Ω—ã–π –∫–æ–¥: {' '.join(info['machine_code'])}")
            
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞: {e}")
            sys.exit(1)
    
    else:
        parser.print_help()

# –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def run_examples():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    assembler = Assembler()
    
    # –ü—Ä–∏–º–µ—Ä 1: –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –æ—á–∏—Å—Ç–∫–∏
    cleanup_program = """
#org 0x0300
jmp main

main:
    ; –û—á–∏—Å—Ç–∫–∞ 8-–±–∏—Ç–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
    xor a, a
    xor b, b
    xor c, c
    xor d, d
    
    ; –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–µ–∫–∞
    mov sp, 0xFF
    mov bp, 0xFF
    mov ss, 0x00
    
    ; –¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
    mov a, 0xEE
    hlt
"""
    
    # –ü—Ä–∏–º–µ—Ä 2: –†–∞–±–æ—Ç–∞ —Å –¥–∏—Å–ø–ª–µ–µ–º
    display_program = """
#org 0x0300
jmp main

main:
    ; –û—á–∏—Å—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
    xor a, a
    xor b, b
    xor c, c
    xor d, d
    
    ; –†–∏—Å—É–µ–º –∫—Ä–µ—Å—Ç –Ω–∞ –¥–∏—Å–ø–ª–µ–µ
    mov a, 2        ; –ü–æ—Ä—Ç –¥–∏—Å–ø–ª–µ—è
    mov b, 8        ; X —Ü–µ–Ω—Ç—Ä
    out a, b
    mov b, 8        ; Y —Ü–µ–Ω—Ç—Ä
    out a, b
    mov b, 1        ; –í–∫–ª—é—á–∏—Ç—å –ø–∏–∫—Å–µ–ª—å
    out a, b
    
    hlt
"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤...")
    
    try:
        # –¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ—á–∏—Å—Ç–∫–∏
        print("\n  –¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ—á–∏—Å—Ç–∫–∏:")
        results1 = assembler.assemble_string(cleanup_program, "both", "asm/tapes/cleanup.tape", {
            'name': 'Cleanup Program',
            'author': 'PC Builder Examples',
            'description': 'Example program showing register cleanup'
        })
        
        # –¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–∏—Å–ø–ª–µ—è
        print("\n  –¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–∏—Å–ø–ª–µ—è:")
        results2 = assembler.assemble_string(display_program, "both", "asm/tapes/display_test.tape", {
            'name': 'Display Test',
            'author': 'PC Builder Examples', 
            'description': 'Example program drawing on display'
        })
        
        print("\n –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –∞—Å—Å–µ–º–±–ª–∏—Ä–æ–≤–∞–Ω—ã!")
        
    except Exception as e:
        print(f" –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö: {e}")

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "--examples":
        run_examples()
    else:
        main()
