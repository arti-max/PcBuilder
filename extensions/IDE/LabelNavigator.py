import tkinter as tk
from tkinter import ttk
import re

class LabelNavigator:
    def __init__(self, parent, ide):
        self.parent = parent
        self.ide = ide
        self.labels = []
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–∞
        self.main_frame = tk.LabelFrame(parent, text="–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Ç–∫–∞–º", 
                                       bg='#2b2b2b', fg='white', font=('Consolas', 10))
        self.main_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        search_frame = tk.Frame(self.main_frame, bg='#2b2b2b')
        search_frame.pack(fill=tk.X, padx=5, pady=5)
        
        tk.Label(search_frame, text="üîç", bg='#2b2b2b', fg='white').pack(side=tk.LEFT)
        
        self.search_var = tk.StringVar()
        self.search_entry = tk.Entry(search_frame, textvariable=self.search_var,
                                    bg='#3c3c3c', fg='white', insertbackground='white',
                                    font=('Consolas', 9))
        self.search_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(5, 0))
        self.search_var.trace('w', self.filter_labels)
        
        # –î–µ—Ä–µ–≤–æ –º–µ—Ç–æ–∫
        tree_frame = tk.Frame(self.main_frame, bg='#2b2b2b')
        tree_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –°—Ç–∏–ª—å –¥–ª—è Treeview
        style = ttk.Style()
        style.theme_use('clam')
        style.configure('Treeview', background='#1e1e1e', foreground='white',
                       fieldbackground='#1e1e1e', borderwidth=0)
        style.configure('Treeview.Heading', background='#3c3c3c', foreground='white',
                       borderwidth=1, relief='flat')
        style.map('Treeview', background=[('selected', '#0e639c')])
        
        # –°–æ–∑–¥–∞–Ω–∏–µ Treeview
        self.tree = ttk.Treeview(tree_frame, height=15, selectmode='extended')
        self.tree.heading('#0', text='–ú–µ—Ç–∫–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏', anchor='w')
        self.tree.column('#0', width=200, minwidth=150)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è –¥–µ—Ä–µ–≤–∞
        scrollbar = tk.Scrollbar(tree_frame, orient=tk.VERTICAL, command=self.tree.yview)
        self.tree.configure(yscrollcommand=scrollbar.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤
        self.tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –°–æ–±—ã—Ç–∏—è
        self.tree.bind('<Double-1>', self.goto_label)
        self.tree.bind('<Return>', self.goto_label)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.context_menu = tk.Menu(self.tree, tearoff=0, bg='#3c3c3c', fg='white')
        self.context_menu.add_command(label="–ü–µ—Ä–µ–π—Ç–∏ –∫ –º–µ—Ç–∫–µ", command=self.goto_selected_label)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–º—è", command=self.copy_label_name)
        self.tree.bind('<Button-3>', self.show_context_menu)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫–∏
        self.update_labels()
        
        print("üß≠ –ù–∞–≤–∏–≥–∞—Ç–æ—Ä –º–µ—Ç–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def update_labels(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–µ—Ç–æ–∫"""
        if not hasattr(self.ide, 'editor') or not self.ide.editor:
            return
        
        content = self.ide.editor.get_content()
        self.labels = self.parse_labels(content)
        self.populate_tree()
    
    def parse_labels(self, content):
        """–ü–∞—Ä—Å–∏–Ω–≥ –º–µ—Ç–æ–∫ –∏–∑ –∫–æ–¥–∞"""
        labels = []
        lines = content.split('\n')
        
        for line_num, line in enumerate(lines, 1):
            original_line = line
            line = line.strip()
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            if line.startswith(';') or not line:
                continue
            
            # –£–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
            if ';' in line:
                line = line.split(';')[0].strip()
            
            # –ò—â–µ–º –º–µ—Ç–∫–∏ (—Å–ª–æ–≤–æ —Å –¥–≤–æ–µ—Ç–æ—á–∏–µ–º)
            if ':' in line:
                label_part = line.split(':')[0].strip()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–µ—Ç–∫–∞
                if (label_part and 
                    not any(char in label_part for char in ['[', ']', ' ', '\t']) and
                    not label_part.startswith('#')):
                    
                    label_type = self.determine_label_type(label_part, original_line)
                    labels.append({
                        'name': label_part,
                        'line': line_num,
                        'type': label_type,
                        'full_line': original_line.strip()
                    })
            
            # –ò—â–µ–º –¥–∏—Ä–µ–∫—Ç–∏–≤—ã
            elif line.startswith('#'):
                directive_match = re.match(r'#(\w+)', line)
                if directive_match:
                    directive_name = directive_match.group(1)
                    labels.append({
                        'name': f"#{directive_name}",
                        'line': line_num,
                        'type': 'directive',
                        'full_line': original_line.strip()
                    })
        
        return labels
    
    def determine_label_type(self, label_name, full_line):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –º–µ—Ç–∫–∏"""
        if label_name.startswith('.'):
            return 'local'
        elif any(keyword in full_line.lower() for keyword in ['main', 'start', 'begin']):
            return 'main'
        elif any(keyword in full_line.lower() for keyword in ['loop', 'repeat']):
            return 'loop'
        elif any(keyword in full_line.lower() for keyword in ['end', 'exit', 'return']):
            return 'end'
        elif any(keyword in full_line.lower() for keyword in ['data', 'table', 'buffer']):
            return 'data'
        else:
            return 'function'
    
    def populate_tree(self):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –º–µ—Ç–∫–∞–º–∏"""
        # –û—á–∏—â–∞–µ–º –¥–µ—Ä–µ–≤–æ
        for item in self.tree.get_children():
            self.tree.delete(item)
        
        if not self.labels:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –º–µ—Ç–æ–∫ –Ω–µ—Ç
            self.tree.insert('', 'end', text='üìù –ú–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', values=('',))
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–µ—Ç–∫–∏ –ø–æ —Ç–∏–ø–∞–º
        grouped_labels = {}
        for label in self.labels:
            label_type = label['type']
            if label_type not in grouped_labels:
                grouped_labels[label_type] = []
            grouped_labels[label_type].append(label)
        
        # –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–æ–≤
        type_icons = {
            'main': 'üè†',
            'function': '‚öôÔ∏è',
            'loop': 'üîÑ',
            'local': 'üìç',
            'data': 'üìä',
            'directive': 'üìù',
            'end': 'üèÅ'
        }
        
        # –ù–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø
        type_names = {
            'main': '–ì–ª–∞–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏',
            'function': '–§—É–Ω–∫—Ü–∏–∏',
            'loop': '–¶–∏–∫–ª—ã',
            'local': '–õ–æ–∫–∞–ª—å–Ω—ã–µ –º–µ—Ç–∫–∏',
            'data': '–î–∞–Ω–Ω—ã–µ',
            'directive': '–î–∏—Ä–µ–∫—Ç–∏–≤—ã',
            'end': '–ó–∞–≤–µ—Ä—à–∞—é—â–∏–µ –º–µ—Ç–∫–∏'
        }
        
        # –ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä—É–ø–ø
        type_order = ['directive', 'main', 'function', 'loop', 'data', 'local', 'end']
        
        for label_type in type_order:
            if label_type in grouped_labels:
                type_icon = type_icons.get(label_type, '‚Ä¢')
                type_name = type_names.get(label_type, label_type.title())
                
                # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É
                group_item = self.tree.insert('', 'end', 
                                             text=f'{type_icon} {type_name} ({len(grouped_labels[label_type])})',
                                             values=('group',), open=True)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –≤ –≥—Ä—É–ø–ø—É
                for label in grouped_labels[label_type]:
                    item_text = f"  {label['name']} (—Å—Ç—Ä–æ–∫–∞ {label['line']})"
                    self.tree.insert(group_item, 'end', text=item_text, 
                                   values=(label['line'], label['name']))
    
    def filter_labels(self, *args):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–µ—Ç–æ–∫ –ø–æ –ø–æ–∏—Å–∫—É"""
        search_text = self.search_var.get().lower()
        
        if not search_text:
            self.populate_tree()
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –º–µ—Ç–∫–∏
        filtered_labels = []
        for label in self.labels:
            if search_text in label['name'].lower():
                filtered_labels.append(label)
        
        # –û—á–∏—â–∞–µ–º –¥–µ—Ä–µ–≤–æ
        for item in self.tree.get_children():
            self.tree.delete(item)
        
        if not filtered_labels:
            self.tree.insert('', 'end', text=f'üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è "{search_text}"', values=('',))
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        search_item = self.tree.insert('', 'end', 
                                      text=f'üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ ({len(filtered_labels)})',
                                      values=('group',), open=True)
        
        for label in filtered_labels:
            item_text = f"  {label['name']} (—Å—Ç—Ä–æ–∫–∞ {label['line']})"
            self.tree.insert(search_item, 'end', text=item_text,
                           values=(label['line'], label['name']))
    
    def goto_label(self, event=None):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–µ—Ç–∫–µ"""
        selection = self.tree.selection()
        if not selection:
            return
        
        item = selection[0]
        values = self.tree.item(item)['values']
        
        if values and values[0] != 'group' and values[0]:
            try:
                line_number = int(values[0])
                self.ide.editor.goto_line(line_number)
                print(f"üéØ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç—Ä–æ–∫–µ {line_number}")
            except (ValueError, IndexError):
                pass
    
    def goto_selected_label(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–µ—Ç–∫–µ (–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é)"""
        self.goto_label()
    
    def copy_label_name(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –º–µ—Ç–∫–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        selection = self.tree.selection()
        if not selection:
            return
        
        item = selection[0]
        values = self.tree.item(item)['values']
        
        if values and len(values) > 1:
            label_name = values[1]
            self.ide.root.clipboard_clear()
            self.ide.root.clipboard_append(label_name)
            self.ide.update_status(f"üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {label_name}")
    
    def show_context_menu(self, event):
        """–ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é"""
        # –í—ã–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
        item = self.tree.identify_row(event.y)
        if item:
            self.tree.selection_set(item)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –≥—Ä—É–ø–ø–∞
            values = self.tree.item(item)['values']
            if values and values[0] != 'group':
                self.context_menu.post(event.x_root, event.y_root)
    
    def highlight_label(self, label_name):
        """–ü–æ–¥—Å–≤–µ—Ç–∫–∞ –º–µ—Ç–∫–∏ –≤ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–µ"""
        # –ò—â–µ–º –º–µ—Ç–∫—É –≤ –¥–µ—Ä–µ–≤–µ –∏ –≤—ã–¥–µ–ª—è–µ–º –µ—ë
        for item in self.tree.get_children():
            for child in self.tree.get_children(item):
                values = self.tree.item(child)['values']
                if values and len(values) > 1 and values[1] == label_name:
                    self.tree.selection_set(child)
                    self.tree.see(child)
                    break
