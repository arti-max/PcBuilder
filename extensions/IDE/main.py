import os
import sys
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import json
import time
import threading

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ UTF-8 –¥–ª—è Windows –∫–æ–Ω—Å–æ–ª–∏
if sys.platform.startswith('win'):
    os.system('chcp 65001 >nul')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π IDE
from Settings import SettingsManager
from AdvancedSettings import AdvancedSettings
from Editor import CodeEditor
from TabManager import TabManager
from LabelNavigator import LabelNavigator
from FileManager import FileManager
from ImportManager import ImportManager
from CompileDialogs import CompileDialog
from Compiler import CompilerIntegration

class PCBuilderIDE:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("PC Builder IDE - Assembly Development Environment")
        self.root.geometry("1200x800")
        self.root.configure(bg='#2b2b2b')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.settings = SettingsManager()
        self.file_manager = FileManager(self)
        self.import_manager = ImportManager(self)
        self.compiler = CompilerIntegration(self)
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.current_file = None
        self.is_modified = False
        self.editor = None
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_menu()
        self.create_toolbar()
        self.create_main_layout()
        self.create_status_bar()
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self.bind_events()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.load_settings()
        
        # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        self.setup_autosave()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∞—Å—Å–µ–º–±–ª–µ—Ä–∞
        self.check_assembler_availability()
        
        print("üöÄ PC Builder IDE –∑–∞–ø—É—â–µ–Ω–∞")
        print("üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:", os.getcwd())
    
    def create_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        menubar = tk.Menu(self.root, bg='#3c3c3c', fg='white')
        self.root.config(menu=menubar)
        
        # –§–∞–π–ª
        file_menu = tk.Menu(menubar, tearoff=0, bg='#3c3c3c', fg='white')
        menubar.add_cascade(label="–§–∞–π–ª", menu=file_menu)
        file_menu.add_command(label="–ù–æ–≤—ã–π (Ctrl+N)", command=self.new_file)
        file_menu.add_command(label="–û—Ç–∫—Ä—ã—Ç—å (Ctrl+O)", command=self.open_file)
        file_menu.add_command(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å (Ctrl+S)", command=self.save_file)
        file_menu.add_command(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫...", command=self.save_file_as)
        file_menu.add_separator()
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã
        self.recent_menu = tk.Menu(file_menu, tearoff=0, bg='#3c3c3c', fg='white')
        file_menu.add_cascade(label="–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã", menu=self.recent_menu)
        self.update_recent_files_menu()
        
        file_menu.add_separator()
        file_menu.add_command(label="–í—ã—Ö–æ–¥", command=self.on_closing)
        
        # –ü—Ä–∞–≤–∫–∞
        edit_menu = tk.Menu(menubar, tearoff=0, bg='#3c3c3c', fg='white')
        menubar.add_cascade(label="–ü—Ä–∞–≤–∫–∞", menu=edit_menu)
        edit_menu.add_command(label="–û—Ç–º–µ–Ω–∏—Ç—å (Ctrl+Z)", command=self.undo)
        edit_menu.add_command(label="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å (Ctrl+Y)", command=self.redo)
        edit_menu.add_separator()
        edit_menu.add_command(label="–í—ã—Ä–µ–∑–∞—Ç—å (Ctrl+X)", command=self.cut)
        edit_menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å (Ctrl+C)", command=self.copy)
        edit_menu.add_command(label="–í—Å—Ç–∞–≤–∏—Ç—å (Ctrl+V)", command=self.paste)
        edit_menu.add_separator()
        edit_menu.add_command(label="–í—ã–¥–µ–ª–∏—Ç—å –≤—Å—ë (Ctrl+A)", command=self.select_all)
        edit_menu.add_separator()
        edit_menu.add_command(label="–ù–∞–π—Ç–∏ (Ctrl+F)", command=self.find_text)
        edit_menu.add_command(label="–ó–∞–º–µ–Ω–∏—Ç—å (Ctrl+H)", command=self.replace_text)
        
        # –í–∏–¥
        view_menu = tk.Menu(menubar, tearoff=0, bg='#3c3c3c', fg='white')
        menubar.add_cascade(label="–í–∏–¥", menu=view_menu)
        
        # –ü–æ–¥–º–µ–Ω—é –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        editor_mode_menu = tk.Menu(view_menu, tearoff=0, bg='#3c3c3c', fg='white')
        view_menu.add_cascade(label="–†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞", menu=editor_mode_menu)
        editor_mode_menu.add_command(label="–û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º", command=lambda: self.set_editor_mode("normal"))
        editor_mode_menu.add_command(label="–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º", command=lambda: self.set_editor_mode("fullscreen"))
        editor_mode_menu.add_command(label="–†–µ–∂–∏–º –±–µ–∑ –æ—Ç–≤–ª–µ—á–µ–Ω–∏–π", command=lambda: self.set_editor_mode("distraction_free"))
        
        view_menu.add_separator()
        
        # –ü–æ–¥–º–µ–Ω—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞–Ω–µ–ª–µ–π
        panels_menu = tk.Menu(view_menu, tearoff=0, bg='#3c3c3c', fg='white')
        view_menu.add_cascade(label="–ü–∞–Ω–µ–ª–∏", menu=panels_menu)
        
        self.show_toolbar_var = tk.BooleanVar(value=True)
        panels_menu.add_checkbutton(label="–ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", 
                                  variable=self.show_toolbar_var,
                                  command=self.toggle_toolbar)
        
        self.show_statusbar_var = tk.BooleanVar(value=True)
        panels_menu.add_checkbutton(label="–°—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è", 
                                  variable=self.show_statusbar_var,
                                  command=self.toggle_statusbar)
        
        self.show_navigator_var = tk.BooleanVar(value=True)
        panels_menu.add_checkbutton(label="–ù–∞–≤–∏–≥–∞—Ç–æ—Ä –º–µ—Ç–æ–∫", 
                                  variable=self.show_navigator_var,
                                  command=self.toggle_navigator)
        
        # –°–±–æ—Ä–∫–∞
        build_menu = tk.Menu(menubar, tearoff=0, bg='#3c3c3c', fg='white')
        menubar.add_cascade(label="–°–±–æ—Ä–∫–∞", menu=build_menu)
        build_menu.add_command(label="–ö–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å –≤ BIN (F5)", command=self.compile_to_bin)
        build_menu.add_command(label="–ö–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å –≤ TAPE (F6)", command=self.compile_to_tape)
        build_menu.add_command(label="–ö–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å –≤ –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞ (F7)", command=self.compile_all)
        build_menu.add_separator()
        build_menu.add_command(label="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–ø–∏–ª—è—Ü–∏—é", command=self.stop_compilation)
        build_menu.add_separator()
        build_menu.add_command(label="–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–º–ø–∏–ª—è—Ü–∏–∏", command=self.show_last_compile_results)
        
        # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        tools_menu = tk.Menu(menubar, tearoff=0, bg='#3c3c3c', fg='white')
        menubar.add_cascade(label="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", menu=tools_menu)
        tools_menu.add_command(label="–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å TAPE —Ñ–∞–π–ª...", command=self.import_tape)
        tools_menu.add_command(label="–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ TAPE...", command=self.export_to_tape)
        tools_menu.add_separator()
        tools_menu.add_command(label="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å", command=self.check_syntax)
        tools_menu.add_command(label="–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥", command=self.format_code)
        tools_menu.add_separator()
        tools_menu.add_command(label="–û—Ç–∫—Ä—ã—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª", command=self.open_terminal)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_menu = tk.Menu(menubar, tearoff=0, bg='#3c3c3c', fg='white')
        menubar.add_cascade(label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", menu=settings_menu)
        settings_menu.add_command(label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ IDE", command=self.open_settings)
        settings_menu.add_command(label="–í—ã–±—Ä–∞—Ç—å –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä", command=self.select_compiler)
        settings_menu.add_separator()
        settings_menu.add_command(label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞", command=self.editor_settings)
        settings_menu.add_command(label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã", command=self.color_scheme_settings)
        
        # –°–ø—Ä–∞–≤–∫–∞
        help_menu = tk.Menu(menubar, tearoff=0, bg='#3c3c3c', fg='white')
        menubar.add_cascade(label="–°–ø—Ä–∞–≤–∫–∞", menu=help_menu)
        help_menu.add_command(label="–°–ø—Ä–∞–≤–∫–∞ –ø–æ IDE", command=self.show_ide_help)
        help_menu.add_command(label="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞", command=self.show_instructions)
        help_menu.add_command(label="–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã", command=self.show_example)
        help_menu.add_separator()
        help_menu.add_command(label="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", command=self.show_about)
    
    def create_toolbar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        self.toolbar = tk.Frame(self.root, bg='#3c3c3c', height=40)
        self.toolbar.pack(fill=tk.X, pady=(0, 5))
        
        # –ö–Ω–æ–ø–∫–∏
        buttons = [
            ("üìÑ", "–ù–æ–≤—ã–π", self.new_file),
            ("üìÇ", "–û—Ç–∫—Ä—ã—Ç—å", self.open_file),
            ("üíæ", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", self.save_file),
            ("|", "", None),
            ("‚ñ∂Ô∏è", "–ö–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å (BIN)", self.compile_to_bin),
            ("üìº", "–ö–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å (TAPE)", self.compile_to_tape),
            ("|", "", None),
            ("üîç", "–ù–∞–π—Ç–∏", self.find_text),
            ("üîß", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", self.open_settings),
        ]
        
        for icon, tooltip, command in buttons:
            if icon == "|":
                # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                separator = tk.Frame(self.toolbar, bg='#555555', width=2, height=30)
                separator.pack(side=tk.LEFT, padx=5)
            else:
                btn = tk.Button(self.toolbar, text=icon, bg='#4c4c4c', fg='white',
                              border=0, relief='flat', width=3, height=1,
                              command=command if command else None)
                btn.pack(side=tk.LEFT, padx=2, pady=5)
                
                # Tooltip
                if tooltip:
                    self.create_tooltip(btn, tooltip)
    
    def create_main_layout(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–∞–∫–µ—Ç–∞"""
        # –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å
        self.main_paned = tk.PanedWindow(self.root, orient=tk.HORIZONTAL, bg='#2b2b2b',
                                       sashrelief=tk.RAISED, sashwidth=3)
        self.main_paned.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ä–µ–¥–∞–∫—Ç–æ—Ä
        self.left_frame = tk.Frame(self.main_paned, bg='#2b2b2b')
        
        # –°–∏—Å—Ç–µ–º–∞ –≤–∫–ª–∞–¥–æ–∫
        self.tab_manager = TabManager(self.left_frame, self)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        self.right_frame = tk.Frame(self.main_paned, bg='#2b2b2b', width=300)
        
        # –ù–∞–≤–∏–≥–∞—Ç–æ—Ä –º–µ—Ç–æ–∫
        self.label_navigator = LabelNavigator(self.right_frame, self)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª–∏
        self.main_paned.add(self.left_frame, minsize=600)
        self.main_paned.add(self.right_frame, minsize=250)
    
    def create_status_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        self.status_bar = tk.Frame(self.root, bg='#3c3c3c', height=25)
        self.status_bar.pack(fill=tk.X, side=tk.BOTTOM)
        
        # –°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞
        self.status_file = tk.Label(self.status_bar, text="–ì–æ—Ç–æ–≤", 
                                   bg='#3c3c3c', fg='white', anchor=tk.W)
        self.status_file.pack(side=tk.LEFT, padx=5)
        
        # –ü–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞
        self.status_cursor = tk.Label(self.status_bar, text="–°—Ç—Ä–æ–∫–∞: 1, –°—Ç–æ–ª–±–µ—Ü: 1",
                                     bg='#3c3c3c', fg='white')
        self.status_cursor.pack(side=tk.RIGHT, padx=5)
        
        # –ö–æ–¥–∏—Ä–æ–≤–∫–∞
        self.status_encoding = tk.Label(self.status_bar, text="UTF-8",
                                       bg='#3c3c3c', fg='white')
        self.status_encoding.pack(side=tk.RIGHT, padx=5)
    
    def create_tooltip(self, widget, text):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏"""
        def on_enter(event):
            tooltip = tk.Toplevel()
            tooltip.wm_overrideredirect(True)
            tooltip.wm_geometry(f"+{event.x_root+10}+{event.y_root+10}")
            label = tk.Label(tooltip, text=text, bg='#ffffcc', fg='black',
                           relief='solid', borderwidth=1)
            label.pack()
            widget.tooltip = tooltip
        
        def on_leave(event):
            if hasattr(widget, 'tooltip'):
                widget.tooltip.destroy()
                del widget.tooltip
        
        widget.bind('<Enter>', on_enter)
        widget.bind('<Leave>', on_leave)
    
    def bind_events(self):
        """–ü—Ä–∏–≤—è–∑–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        self.root.bind('<Control-n>', lambda e: self.new_file())
        self.root.bind('<Control-o>', lambda e: self.open_file())
        self.root.bind('<Control-s>', lambda e: self.save_file())
        self.root.bind('<Control-a>', lambda e: self.select_all())
        self.root.bind('<Control-f>', lambda e: self.find_text())
        self.root.bind('<Control-h>', lambda e: self.replace_text())
        self.root.bind('<F5>', lambda e: self.compile_to_bin())
        self.root.bind('<F6>', lambda e: self.compile_to_tape())
        self.root.bind('<F7>', lambda e: self.compile_all())
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
    
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        settings = self.settings.load_settings()
        self.apply_settings(settings)
    
    def apply_settings(self, settings):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        appearance = settings.get('appearance', {})
        
        if not appearance.get('show_toolbar', True):
            self.toolbar.pack_forget()
            self.show_toolbar_var.set(False)
        
        if not appearance.get('show_status_bar', True):
            self.status_bar.pack_forget()
            self.show_statusbar_var.set(False)
        
    def setup_autosave(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        auto_save = self.settings.get_setting('editor', 'auto_save', False)
        
        if auto_save:
            interval = self.settings.get_setting('editor', 'auto_save_interval', 5) * 60 * 1000
            self.schedule_autosave(interval)

    
    def schedule_autosave(self, interval):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        def autosave():
            if self.is_modified and self.current_file:
                self.save_file()
            self.root.after(interval, autosave)
        
        self.root.after(interval, autosave)
    
    def check_assembler_availability(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∞—Å—Å–µ–º–±–ª–µ—Ä–∞"""
        if hasattr(self, 'compiler'):
            assembler_path = self.compiler.get_assembler_path()
            if assembler_path:
                rel_path = os.path.relpath(assembler_path, os.getcwd())
                self.update_status(f"–ê—Å—Å–µ–º–±–ª–µ—Ä: {rel_path}")
            else:
                self.update_status("–ê—Å—Å–µ–º–±–ª–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
                self.root.after(1000, self.prompt_select_assembler)
    
    def prompt_select_assembler(self):
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞—Ç—å –∞—Å—Å–µ–º–±–ª–µ—Ä"""
        result = messagebox.askyesno(
            "–ê—Å—Å–µ–º–±–ª–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
            "–ê—Å—Å–µ–º–±–ª–µ—Ä PC Builder –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n–•–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ–≥–æ –≤—Ä—É—á–Ω—É—é?"
        )
        
        if result:
            self.select_compiler()
    
    # === –§–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ===
    
    def new_file(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
        if hasattr(self, 'tab_manager') and self.tab_manager:
            self.tab_manager.add_tab()
            self.update_status("–ù–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω")
    
    def open_file(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞"""
        file_path = filedialog.askopenfilename(
            title="–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –∞—Å—Å–µ–º–±–ª–µ—Ä–∞",
            filetypes=[("Assembly files", "*.asm"), ("All files", "*.*")]
        )
        
        if file_path:
            if hasattr(self, 'tab_manager') and self.tab_manager:
                tab_id = self.tab_manager.open_file_in_new_tab(file_path)
                if tab_id:
                    self.update_status(f"–§–∞–π–ª –æ—Ç–∫—Ä—ã—Ç: {os.path.basename(file_path)}")
                    self.add_to_recent_files(file_path)
    
    def save_file(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        if hasattr(self, 'tab_manager') and self.tab_manager and self.tab_manager.current_tab:
            if self.tab_manager.save_tab(self.tab_manager.current_tab):
                filename = os.path.basename(self.current_file) if self.current_file else "—Ñ–∞–π–ª"
                self.update_status(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
                return True
        return False
    
    def save_file_as(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–∞–∫..."""
        if hasattr(self, 'tab_manager') and self.tab_manager and self.tab_manager.current_tab:
            if self.tab_manager.save_tab_as(self.tab_manager.current_tab):
                filename = os.path.basename(self.current_file) if self.current_file else "—Ñ–∞–π–ª"
                self.update_status(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: {filename}")
                if self.current_file:
                    self.add_to_recent_files(self.current_file)
                return True
        return False
    
    def add_to_recent_files(self, file_path):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö"""
        settings = self.settings.load_settings()
        recent_files = settings.get('recent_files', [])
        
        if file_path in recent_files:
            recent_files.remove(file_path)
        
        recent_files.insert(0, file_path)
        recent_files = recent_files[:10]
        
        settings['recent_files'] = recent_files
        self.settings.save_settings(settings)
        self.update_recent_files_menu()
    
    def update_recent_files_menu(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤"""
        self.recent_menu.delete(0, tk.END)
        
        settings = self.settings.load_settings()
        recent_files = settings.get('recent_files', [])
        
        if recent_files:
            for file_path in recent_files:
                if os.path.exists(file_path):
                    filename = os.path.basename(file_path)
                    self.recent_menu.add_command(
                        label=filename,
                        command=lambda path=file_path: self.open_recent_file(path)
                    )
            
            self.recent_menu.add_separator()
            self.recent_menu.add_command(label="–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", command=self.clear_recent_files)
        else:
            self.recent_menu.add_command(label="–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤", state=tk.DISABLED)
    
    def open_recent_file(self, file_path):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∞–π–ª–∞"""
        if os.path.exists(file_path):
            if hasattr(self, 'tab_manager') and self.tab_manager:
                tab_id = self.tab_manager.open_file_in_new_tab(file_path)
                if tab_id:
                    self.update_status(f"–§–∞–π–ª –æ—Ç–∫—Ä—ã—Ç: {os.path.basename(file_path)}")
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:\n{file_path}")
    
    def clear_recent_files(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤"""
        settings = self.settings.load_settings()
        settings['recent_files'] = []
        self.settings.save_settings(settings)
        self.update_recent_files_menu()
    
    # === –û–ø–µ—Ä–∞—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===
    
    def undo(self):
        """–û—Ç–º–µ–Ω–∞"""
        if self.editor:
            self.editor.undo()
    
    def redo(self):
        """–ü–æ–≤—Ç–æ—Ä"""
        if self.editor:
            self.editor.redo()
    
    def cut(self):
        """–í—ã—Ä–µ–∑–∞—Ç—å"""
        if self.editor:
            try:
                self.editor.text_widget.event_generate("<<Cut>>")
            except:
                pass
    
    def copy(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å"""
        if self.editor:
            try:
                self.editor.text_widget.event_generate("<<Copy>>")
            except:
                pass
    
    def paste(self):
        """–í—Å—Ç–∞–≤–∏—Ç—å"""
        if self.editor:
            try:
                self.editor.text_widget.event_generate("<<Paste>>")
            except:
                pass
    
    def select_all(self):
        """–í—ã–¥–µ–ª–∏—Ç—å –≤—Å—ë"""
        if self.editor:
            try:
                self.editor.text_widget.tag_add("sel", "1.0", "end")
                return "break"
            except:
                pass
    
    def find_text(self):
        """–ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞"""
        if self.editor:
            self.editor.show_find_dialog()
    
    def replace_text(self):
        """–ó–∞–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç–∞"""
        if self.editor:
            self.editor.show_replace_dialog()
    
    # === –ö–æ–º–ø–∏–ª—è—Ü–∏—è ===
    
    def compile_to_bin(self):
        """–ö–æ–º–ø–∏–ª—è—Ü–∏—è –≤ BIN"""
        if not self.current_file:
            if not self.save_file():
                return
                
        dialog = CompileDialog(self.root, "bin")
        result = dialog.show()
        
        if result:
            if self.is_modified:
                self.save_file()
            
            self.compiler.compile_file(
                self.current_file, 
                "bin", 
                output_path=result.get('output_dir')
            )
    
    def compile_to_tape(self):
        """–ö–æ–º–ø–∏–ª—è—Ü–∏—è –≤ TAPE"""
        if not self.current_file:
            if not self.save_file():
                return
                
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
        dialog = CompileDialog(self.root, "tape")
        result = dialog.show()
        
        if result:
            # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∫–æ–º–ø–∏–ª—è—Ü–∏–µ–π
            if self.is_modified:
                self.save_file()
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            self.compiler.compile_file(
                self.current_file, 
                "tape",
                output_path=result.get('output_path'),
                metadata=result.get('metadata')
            )
    
    def compile_all(self):
        """–ö–æ–º–ø–∏–ª—è—Ü–∏—è –≤ –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞"""
        if not self.current_file:
            if not self.save_file():
                return
        
        # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∫–æ–º–ø–∏–ª—è—Ü–∏–µ–π
        if self.is_modified:
            self.save_file()
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
        self.compiler.compile_file(self.current_file, "both")
    
    def stop_compilation(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏"""
        if hasattr(self, 'compiler'):
            self.compiler.stop_compilation()
    
    def show_last_compile_results(self):
        """–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–ø–∏–ª—è—Ü–∏–∏"""
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
    
    # === –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã ===
    
    def import_tape(self):
        """–ò–º–ø–æ—Ä—Ç TAPE —Ñ–∞–π–ª–∞"""
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ò–º–ø–æ—Ä—Ç TAPE —Ñ–∞–π–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
    
    def export_to_tape(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ TAPE"""
        self.compile_to_tape()
    
    def check_syntax(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞"""
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
    
    def format_code(self):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞"""
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
    
    def open_terminal(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"""
        try:
            import subprocess
            
            if sys.platform.startswith('win'):
                subprocess.Popen('cmd.exe', cwd=os.getcwd())
            elif sys.platform.startswith('darwin'):
                subprocess.Popen(['open', '-a', 'Terminal', '.'], cwd=os.getcwd())
            else:
                subprocess.Popen(['x-terminal-emulator'], cwd=os.getcwd())
        except:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª")
    
    # === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
    
    def open_settings(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self.settings.show_settings_dialog(self.root)
    
    def open_advanced_settings(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self.advanced_settings.show_settings_dialog(self.root)
    
    def select_compiler(self):
        """–í—ã–±–æ—Ä –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞"""
        file_path = filedialog.askopenfilename(
            title="–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞",
            filetypes=[("Python files", "*.py"), ("All files", "*.*")]
        )
        
        if file_path:
            self.settings.set_setting('compiler', 'path', file_path)
            self.update_status(f"–ö–æ–º–ø–∏–ª—è—Ç–æ—Ä: {os.path.basename(file_path)}")
    
    def editor_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞"""
        self.settings.show_settings_dialog(self.root)
    
    def color_scheme_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã"""
        self.settings.show_settings_dialog(self.root)
    
    # === –°–ø—Ä–∞–≤–∫–∞ ===
    
    def show_ide_help(self):
        """–ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ IDE"""
        help_text = """
PC Builder IDE - –°–ø—Ä–∞–≤–∫–∞

=== –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ ===
Ctrl+N - –ù–æ–≤—ã–π —Ñ–∞–π–ª
Ctrl+O - –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª
Ctrl+S - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª
Ctrl+F - –ù–∞–π—Ç–∏
Ctrl+H - –ó–∞–º–µ–Ω–∏—Ç—å
F5 - –ö–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å –≤ BIN
F6 - –ö–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å –≤ TAPE
F7 - –ö–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å –≤ –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞

=== –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ IDE ===
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–∫–ª–∞–¥–æ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
‚Ä¢ –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∞—Å—Å–µ–º–±–ª–µ—Ä–∞
‚Ä¢ –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
‚Ä¢ –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Ç–∫–∞–º
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–æ–º
‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ –ò–º–ø–æ—Ä—Ç —Ñ–∞–π–ª–æ–≤
"""
        
        help_window = tk.Toplevel(self.root)
        help_window.title("–°–ø—Ä–∞–≤–∫–∞ –ø–æ IDE")
        help_window.geometry("600x500")
        help_window.configure(bg='#2b2b2b')
        
        text_widget = tk.Text(help_window, bg='#1e1e1e', fg='white',
                             font=('Consolas', 11), padx=10, pady=10)
        text_widget.pack(fill=tk.BOTH, expand=True)
        
        text_widget.insert('1.0', help_text)
        text_widget.config(state=tk.DISABLED)
    
    def show_instructions(self):
        """–ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º"""
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def show_example(self):
        """–ü–æ–∫–∞–∑ –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        example = """; –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è PC Builder
#org 0x0300
jmp main

main:
    ; –û—á–∏—Å—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
    xor a, a
    xor b, b
    xor c, c
    xor d, d
    
    ; –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–µ–∫–∞
    mov sp, 0xFF
    mov bp, 0xFF
    mov ss, 0x00
    
    ; –ü—Ä–æ—Å—Ç–æ–π —Ü–∏–∫–ª
    mov a, 10
loop:
    dec a
    cmp a, 0
    jne loop
    
    hlt
"""
        
        if hasattr(self, 'tab_manager') and self.tab_manager:
            tab_id = self.tab_manager.add_tab(title="–ü—Ä–∏–º–µ—Ä", content=example)
            self.update_status("–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–≥—Ä—É–∂–µ–Ω")
    
    def show_about(self):
        """–û –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        messagebox.showinfo("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", 
                           "PC Builder IDE v1.0\n\n"
                           "–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ä–µ–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏\n"
                           "–¥–ª—è 8-–±–∏—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ PC Builder\n\n"
                           "–°–æ–∑–¥–∞–Ω–æ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ PC Builder\n"
                           "github.com/arti-max/PcBuilder")
    
    # === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–æ–º ===
    
    def set_editor_mode(self, mode):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞"""
        if mode == "normal":
            if hasattr(self, 'fullscreen_state'):
                self.root.attributes('-fullscreen', False)
                del self.fullscreen_state
            self.update_status("–û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º")
        
        elif mode == "fullscreen":
            self.fullscreen_state = True
            self.root.attributes('-fullscreen', True)
            self.update_status("–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º (Esc –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
            self.root.bind('<Escape>', lambda e: self.set_editor_mode("normal"))
        
        elif mode == "distraction_free":
            self.toolbar.pack_forget()
            self.status_bar.pack_forget()
            if self.right_frame in self.main_paned.panes():
                self.main_paned.forget(self.right_frame)
            self.update_status("–†–µ–∂–∏–º –±–µ–∑ –æ—Ç–≤–ª–µ—á–µ–Ω–∏–π")
    
    def toggle_toolbar(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        if self.show_toolbar_var.get():
            self.toolbar.pack(fill=tk.X, pady=(0, 5), before=self.main_paned)
        else:
            self.toolbar.pack_forget()
    
    def toggle_statusbar(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–æ–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        if self.show_statusbar_var.get():
            self.status_bar.pack(fill=tk.X, side=tk.BOTTOM)
        else:
            self.status_bar.pack_forget()
    
    def toggle_navigator(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞"""
        if self.show_navigator_var.get():
            if self.right_frame not in self.main_paned.panes():
                self.main_paned.add(self.right_frame, minsize=250)
        else:
            if self.right_frame in self.main_paned.panes():
                self.main_paned.forget(self.right_frame)
    
    # === –£—Ç–∏–ª–∏—Ç—ã ===
    
    def update_title(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ–∫–Ω–∞"""
        title = "PC Builder IDE"
        if self.current_file:
            filename = os.path.basename(self.current_file)
            title += f" - {filename}"
        
        if self.is_modified:
            title += " *"
        
        self.root.title(title)
    
    def update_status(self, message):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        self.status_file.config(text=message)
        print(f"üìù {message}")
    
    def update_cursor_position(self, line, column):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞"""
        self.status_cursor.config(text=f"–°—Ç—Ä–æ–∫–∞: {line}, –°—Ç–æ–ª–±–µ—Ü: {column}")
    
    def set_modified(self, modified=True):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
        self.is_modified = modified
        self.update_title()
        
        if hasattr(self, 'tab_manager') and self.tab_manager and self.tab_manager.current_tab:
            self.tab_manager.set_tab_modified(self.tab_manager.current_tab, modified)
        
        if modified and hasattr(self, 'label_navigator'):
            self.label_navigator.update_labels()
    
    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–∫–∞—Ö
        if hasattr(self, 'tab_manager') and self.tab_manager:
            for tab_id, tab_info in self.tab_manager.tabs.items():
                if tab_info['modified']:
                    self.tab_manager.switch_to_tab(tab_id)
                    if not self.tab_manager.close_tab(tab_id):
                        return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫—Ä—ã—Ç–∏–µ
        
        print("üëã PC Builder IDE –∑–∞–∫—Ä—ã—Ç–∞")
        self.root.destroy()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ IDE"""
        self.root.mainloop()

if __name__ == "__main__":
    ide = PCBuilderIDE()
    ide.run()
