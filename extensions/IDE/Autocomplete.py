import tkinter as tk
from tkinter import ttk
import re

class AutocompleteManager:
    def __init__(self, text_widget, ide):
        self.text_widget = text_widget
        self.ide = ide
        self.popup_window = None
        self.listbox = None
        self.current_suggestions = []
        
        # –°–ª–æ–≤–∞—Ä—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        self.instructions = {
            # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
            'nop': {'args': 0, 'desc': '–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏'},
            'mov': {'args': 2, 'desc': 'mov dst, src - –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö'},
            'ld': {'args': 2, 'desc': 'ld reg, value - –ó–∞–≥—Ä—É–∑–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è'},
            'hlt': {'args': 0, 'desc': '–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞'},
            
            # –ê—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞
            'add': {'args': 2, 'desc': 'add reg1, reg2 - –°–ª–æ–∂–µ–Ω–∏–µ'},
            'sub': {'args': 2, 'desc': 'sub reg1, reg2 - –í—ã—á–∏—Ç–∞–Ω–∏–µ'},
            'inc': {'args': 1, 'desc': 'inc reg - –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞ 1'},
            'dec': {'args': 1, 'desc': 'dec reg - –£–º–µ–Ω—å—à–µ–Ω–∏–µ –Ω–∞ 1'},
            
            # –õ–æ–≥–∏–∫–∞
            'xor': {'args': 2, 'desc': 'xor reg1, reg2 - –ò—Å–∫–ª—é—á–∞—é—â–µ–µ –ò–õ–ò'},
            'or': {'args': 2, 'desc': 'or reg1, reg2 - –õ–æ–≥–∏—á–µ—Å–∫–æ–µ –ò–õ–ò'},
            'and': {'args': 2, 'desc': 'and reg1, reg2 - –õ–æ–≥–∏—á–µ—Å–∫–æ–µ –ò'},
            'not': {'args': 1, 'desc': 'not reg - –õ–æ–≥–∏—á–µ—Å–∫–æ–µ –ù–ï'},
            'shl': {'args': 1, 'desc': 'shl reg - –°–¥–≤–∏–≥ –≤–ª–µ–≤–æ'},
            'shr': {'args': 1, 'desc': 'shr reg - –°–¥–≤–∏–≥ –≤–ø—Ä–∞–≤–æ'},
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã
            'cmp': {'args': 2, 'desc': 'cmp op1, op2 - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ'},
            'jmp': {'args': 1, 'desc': 'jmp address - –ë–µ–∑—É—Å–ª–æ–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥'},
            'je': {'args': 1, 'desc': 'je address - –ü–µ—Ä–µ—Ö–æ–¥ –µ—Å–ª–∏ —Ä–∞–≤–Ω–æ'},
            'jne': {'args': 1, 'desc': 'jne address - –ü–µ—Ä–µ—Ö–æ–¥ –µ—Å–ª–∏ –Ω–µ —Ä–∞–≤–Ω–æ'},
            
            # –ü–æ–¥–ø—Ä–æ–≥—Ä–∞–º–º—ã
            'call': {'args': 1, 'desc': 'call address - –í—ã–∑–æ–≤ –ø–æ–¥–ø—Ä–æ–≥—Ä–∞–º–º—ã'},
            'ret': {'args': 0, 'desc': '–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –ø–æ–¥–ø—Ä–æ–≥—Ä–∞–º–º—ã'},
            'push': {'args': 1, 'desc': 'push reg - –ü–æ–ª–æ–∂–∏—Ç—å –≤ —Å—Ç–µ–∫'},
            'pop': {'args': 1, 'desc': 'pop reg - –í–∑—è—Ç—å –∏–∑ —Å—Ç–µ–∫–∞'},
            
            # –ü–∞–º—è—Ç—å
            'ldm': {'args': 2, 'desc': 'ldm reg, [address] - –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –ø–∞–º—è—Ç–∏'},
            'stm': {'args': 2, 'desc': 'stm [address], reg - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å'},
            
            # –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            'in': {'args': 2, 'desc': 'in port, reg - –ß—Ç–µ–Ω–∏–µ —Å –ø–æ—Ä—Ç–∞'},
            'out': {'args': 2, 'desc': 'out port, reg - –ó–∞–ø–∏—Å—å –≤ –ø–æ—Ä—Ç'},
        }
        
        # –†–µ–≥–∏—Å—Ç—Ä—ã
        self.registers = ['a', 'b', 'c', 'd', 'ip', 'ir', 'sp', 'bp', 'ss']
        
        # –î–∏—Ä–µ–∫—Ç–∏–≤—ã
        self.directives = ['#org', '#db']
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.min_chars = 1
        self.case_sensitive = False
        self.enabled = True
        
        print("üîÆ –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
    
    def check_autocomplete(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        if not self.enabled:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ
        current_word = self.get_current_word()
        
        if len(current_word) >= self.min_chars:
            suggestions = self.get_suggestions(current_word)
            
            if suggestions:
                self.show_popup(suggestions)
            else:
                self.hide_popup()
        else:
            self.hide_popup()
    
    def get_current_word(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
            cursor_pos = self.text_widget.index(tk.INSERT)
            line, col = cursor_pos.split('.')
            col = int(col)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É
            line_text = self.text_widget.get(f'{line}.0', f'{line}.end')
            
            # –ù–∞—Ö–æ–¥–∏–º –≥—Ä–∞–Ω–∏—Ü—ã —Å–ª–æ–≤–∞
            start = col
            while start > 0 and (line_text[start-1].isalnum() or line_text[start-1] in '_#'):
                start -= 1
            
            end = col
            while end < len(line_text) and (line_text[end].isalnum() or line_text[end] in '_'):
                end += 1
            
            return line_text[start:col]
        except:
            return ""
    
    def get_suggestions(self, word):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
        suggestions = []
        
        if not self.case_sensitive:
            word = word.lower()
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        for instruction, info in self.instructions.items():
            if instruction.startswith(word):
                suggestions.append({
                    'text': instruction,
                    'type': 'instruction',
                    'description': info['desc']
                })
        
        # –†–µ–≥–∏—Å—Ç—Ä—ã
        for register in self.registers:
            if register.startswith(word):
                suggestions.append({
                    'text': register,
                    'type': 'register',
                    'description': f'–†–µ–≥–∏—Å—Ç—Ä {register.upper()}'
                })
        
        # –î–∏—Ä–µ–∫—Ç–∏–≤—ã
        for directive in self.directives:
            if directive.startswith(word):
                suggestions.append({
                    'text': directive,
                    'type': 'directive',
                    'description': f'–î–∏—Ä–µ–∫—Ç–∏–≤–∞ {directive}'
                })
        
        # –ú–µ—Ç–∫–∏ –∏–∑ –∫–æ–¥–∞
        labels = self.get_labels_from_code()
        for label in labels:
            if label.startswith(word):
                suggestions.append({
                    'text': label,
                    'type': 'label',
                    'description': f'–ú–µ—Ç–∫–∞ {label}'
                })
        
        return suggestions[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    
    def get_labels_from_code(self):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–æ–∫ –∏–∑ –∫–æ–¥–∞"""
        content = self.text_widget.get('1.0', 'end-1c')
        labels = []
        
        # –ò—â–µ–º –º–µ—Ç–∫–∏ (—Å–ª–æ–≤–æ —Å –¥–≤–æ–µ—Ç–æ—á–∏–µ–º)
        for line in content.split('\n'):
            line = line.strip()
            if ':' in line and not line.startswith(';'):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –º–µ—Ç–∫–∞, –∞ –Ω–µ –∞–¥—Ä–µ—Å–∞—Ü–∏—è –ø–∞–º—è—Ç–∏
                before_colon = line.split(':')[0].strip()
                if before_colon and not any(char in before_colon for char in ['[', ']', ' ', '\t']):
                    labels.append(before_colon)
        
        return labels
    
    def show_popup(self, suggestions):
        """–ü–æ–∫–∞–∑ popup —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏"""
        self.current_suggestions = suggestions
        
        if self.popup_window:
            self.hide_popup()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        cursor_pos = self.text_widget.index(tk.INSERT)
        x, y, _, _ = self.text_widget.bbox(cursor_pos)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        abs_x = self.text_widget.winfo_rootx() + x
        abs_y = self.text_widget.winfo_rooty() + y + 20
        
        # –°–æ–∑–¥–∞–µ–º popup –æ–∫–Ω–æ
        self.popup_window = tk.Toplevel(self.text_widget)
        self.popup_window.wm_overrideredirect(True)
        self.popup_window.geometry(f"+{abs_x}+{abs_y}")
        self.popup_window.configure(bg='#2b2b2b', relief='solid', bd=1)
        
        # –°–æ–∑–¥–∞–µ–º listbox
        self.listbox = tk.Listbox(self.popup_window, height=min(8, len(suggestions)),
                                 bg='#2b2b2b', fg='white', selectbackground='#0e639c',
                                 border=0, font=('Consolas', 10))
        self.listbox.pack()
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        for suggestion in suggestions:
            display_text = self.format_suggestion(suggestion)
            self.listbox.insert(tk.END, display_text)
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
        if suggestions:
            self.listbox.selection_set(0)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        self.listbox.bind('<Double-Button-1>', self.insert_suggestion)
        self.listbox.bind('<Return>', self.insert_suggestion)
        self.text_widget.bind('<Escape>', lambda e: self.hide_popup())
        self.text_widget.bind('<Down>', self.handle_down_arrow)
        self.text_widget.bind('<Up>', self.handle_up_arrow)
        self.text_widget.bind('<Tab>', self.insert_suggestion)
        
        # –§–æ–∫—É—Å –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ —Ç–µ–∫—Å—Ç–µ
        self.text_widget.focus_set()
    
    def format_suggestion(self, suggestion):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        text = suggestion['text']
        type_icon = {
            'instruction': '‚öôÔ∏è',
            'register': 'üìã',
            'directive': 'üìù',
            'label': 'üè∑Ô∏è'
        }.get(suggestion['type'], '‚Ä¢')
        
        return f"{type_icon} {text}"
    
    def hide_popup(self):
        """–°–∫—Ä—ã—Ç–∏–µ popup"""
        if self.popup_window:
            self.popup_window.destroy()
            self.popup_window = None
            self.listbox = None
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–≤—è–∑–∫–∏
        self.text_widget.unbind('<Down>')
        self.text_widget.unbind('<Up>')
        self.text_widget.unbind('<Tab>')
    
    def handle_down_arrow(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–µ–ª–∫–∏ –≤–Ω–∏–∑"""
        if self.listbox:
            current = self.listbox.curselection()
            if current:
                next_index = min(current[0] + 1, self.listbox.size() - 1)
            else:
                next_index = 0
            
            self.listbox.selection_clear(0, tk.END)
            self.listbox.selection_set(next_index)
            self.listbox.see(next_index)
            return 'break'
    
    def handle_up_arrow(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–µ–ª–∫–∏ –≤–≤–µ—Ä—Ö"""
        if self.listbox:
            current = self.listbox.curselection()
            if current:
                next_index = max(current[0] - 1, 0)
            else:
                next_index = 0
            
            self.listbox.selection_clear(0, tk.END)
            self.listbox.selection_set(next_index)
            self.listbox.see(next_index)
            return 'break'
    
    def insert_suggestion(self, event=None):
        """–í—Å—Ç–∞–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        if not self.listbox or not self.current_suggestions:
            return
        
        selection = self.listbox.curselection()
        if not selection:
            return
        
        suggestion = self.current_suggestions[selection[0]]
        suggestion_text = suggestion['text']
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ –∏ –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ
        current_word = self.get_current_word()
        cursor_pos = self.text_widget.index(tk.INSERT)
        line, col = cursor_pos.split('.')
        col = int(col)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞—á–∞–ª–∞ —Å–ª–æ–≤–∞
        start_col = col - len(current_word)
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        self.text_widget.delete(f'{line}.{start_col}', f'{line}.{col}')
        self.text_widget.insert(f'{line}.{start_col}', suggestion_text)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        if suggestion['type'] == 'instruction':
            self.insert_instruction_template(suggestion_text, suggestion)
        
        self.hide_popup()
        return 'break'
    
    def insert_instruction_template(self, instruction, info):
        """–í—Å—Ç–∞–≤–∫–∞ —à–∞–±–ª–æ–Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
        templates = {
            'mov': ' a, b',
            'ld': ' a, 42',
            'add': ' a, b',
            'sub': ' a, b',
            'cmp': ' a, b',
            'jmp': ' label',
            'je': ' label',
            'jne': ' label',
            'call': ' function',
            'push': ' a',
            'pop': ' a',
            'inc': ' a',
            'dec': ' a',
            'in': ' port, reg',
            'out': ' port, reg',
            'ldm': ' a, [address]',
            'stm': ' [address], a',
            '#org': ' 0x0300',
            '#db': ' 0x00, 0x01'
        }
        
        template = templates.get(instruction, '')
        if template:
            # –í—Å—Ç–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω –∏ –≤—ã–¥–µ–ª—è–µ–º –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
            start_pos = self.text_widget.index(tk.INSERT)
            self.text_widget.insert(tk.INSERT, template)
            
            # –í—ã–¥–µ–ª—è–µ–º –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if ' ' in template:
                first_arg_start = template.find(' ') + 1
                first_arg = template[first_arg_start:].split(',')[0].split(' ')[0]
                
                line, col = start_pos.split('.')
                col = int(col)
                
                arg_start = f'{line}.{col + first_arg_start}'
                arg_end = f'{line}.{col + first_arg_start + len(first_arg)}'
                
                self.text_widget.tag_add('sel', arg_start, arg_end)
                self.text_widget.mark_set(tk.INSERT, arg_end)
    
    def update_settings(self, settings):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        autocomplete_settings = settings.get('autocomplete', {})
        self.enabled = autocomplete_settings.get('enabled', True)
        self.case_sensitive = autocomplete_settings.get('case_sensitive', False)
        self.min_chars = autocomplete_settings.get('min_chars', 1)
