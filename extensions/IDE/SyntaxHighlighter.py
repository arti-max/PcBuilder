import tkinter as tk
import re

class SyntaxHighlighter:
    def __init__(self, text_widget):
        self.text_widget = text_widget
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        self.setup_tags()
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        self.setup_patterns()
        
        print("üé® –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    def force_highlight(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞"""
        self.text_widget.after_idle(self.highlight_syntax)
    
    def setup_tags(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏"""
        # –¶–≤–µ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Ç–µ–º–∞ VS Code Dark)
        self.colors = {
            'keyword': '#569cd6',      # –ì–æ–ª—É–±–æ–π –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            'register': '#9cdcfe',     # –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
            'number': '#b5cea8',       # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è —á–∏—Å–µ–ª
            'string': '#ce9178',       # –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è —Å—Ç—Ä–æ–∫
            'comment': '#6a9955',      # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            'label': '#dcdcaa',        # –ñ–µ–ª—Ç—ã–π –¥–ª—è –º–µ—Ç–æ–∫
            'directive': '#c586c0',    # –†–æ–∑–æ–≤—ã–π –¥–ª—è –¥–∏—Ä–µ–∫—Ç–∏–≤
            'operator': '#d4d4d4',     # –ë–µ–ª—ã–π –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
            'error': '#f44747',        # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –æ—à–∏–±–æ–∫
            'address': '#4fc1ff',      # –°–∏–Ω–∏–π –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤
        }
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–≥–∏
        for tag_name, color in self.colors.items():
            self.text_widget.tag_configure(tag_name, foreground=color)
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
        self.text_widget.tag_configure('bold', font=('Consolas', 11, 'bold'))
        self.text_widget.tag_configure('italic', font=('Consolas', 11, 'italic'))
    
    def setup_patterns(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏"""
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        self.instructions = [
            'nop', 'mov', 'ld', 'add', 'sub', 'xor', 'or', 'and', 'not',
            'cmp', 'jmp', 'je', 'jne', 'shl', 'shr', 'call', 'ret',
            'in', 'out', 'ldm', 'stm', 'hlt', 'push', 'pop', 'inc', 'dec'
        ]
        
        # –†–µ–≥–∏—Å—Ç—Ä—ã
        self.registers = ['a', 'b', 'c', 'd', 'ip', 'ir', 'sp', 'bp', 'ss']
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        self.patterns = [
            # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (—Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            (r';.*$', 'comment'),
            
            # –î–∏—Ä–µ–∫—Ç–∏–≤—ã
            (r'#\w+', 'directive'),
            
            # –ú–µ—Ç–∫–∏ (—Å–ª–æ–≤–æ —Å –¥–≤–æ–µ—Ç–æ—á–∏–µ–º)
            (r'^\s*([a-zA-Z_\.][a-zA-Z0-9_\.]*)\s*:', 'label'),
            
            # –®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—ã–µ —á–∏—Å–ª–∞
            (r'\b0[xX][0-9a-fA-F]+\b', 'number'),
            
            # –î–≤–æ–∏—á–Ω—ã–µ —á–∏—Å–ª–∞
            (r'\b0[bB][01]+\b', 'number'),
            
            # –î–µ—Å—è—Ç–∏—á–Ω—ã–µ —á–∏—Å–ª–∞
            (r'\b\d+\b', 'number'),
            
            # –ê–¥—Ä–µ—Å–∞—Ü–∏—è –ø–∞–º—è—Ç–∏
            (r'\[[^\]]+\]', 'address'),
            
            # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (—Å–æ–∑–¥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
            (r'\b(?:' + '|'.join(self.instructions) + r')\b', 'keyword'),
            
            # –†–µ–≥–∏—Å—Ç—Ä—ã (—Å–æ–∑–¥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
            (r'\b(?:' + '|'.join(self.registers) + r')\b', 'register'),
            
            # –û–ø–µ—Ä–∞—Ç–æ—Ä—ã
            (r'[+\-*/=<>!&|^~]', 'operator'),
            
            # –ó–∞–ø—è—Ç—ã–µ –∏ —Å–∫–æ–±–∫–∏
            (r'[,\(\)\[\]]', 'operator'),
        ]
        
        # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        self.compiled_patterns = []
        for pattern, tag in self.patterns:
            try:
                compiled_pattern = re.compile(pattern, re.IGNORECASE | re.MULTILINE)
                self.compiled_patterns.append((compiled_pattern, tag))
            except re.error as e:
                print(f"–û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ {pattern}: {e}")
    
    def highlight_syntax(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
            content = self.text_widget.get('1.0', 'end-1c')
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–≥–∏
            for tag_name in self.colors.keys():
                self.text_widget.tag_remove(tag_name, '1.0', 'end')
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
            if not content.strip():
                return
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            lines = content.split('\n')
            for line_num, line in enumerate(lines, 1):
                if line.strip():  # –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    self.highlight_line(line_num, line)
        
        except tk.TclError:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤–æ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–∞
            pass
        
    def highlight_line(self, line_num, line_content):
        """–ü–æ–¥—Å–≤–µ—Ç–∫–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        line_start = f'{line_num}.0'
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
        for pattern, tag in self.compiled_patterns:
            for match in pattern.finditer(line_content):
                start_col = match.start()
                end_col = match.end()
                
                start_pos = f'{line_num}.{start_col}'
                end_pos = f'{line_num}.{end_col}'
                
                # –î–ª—è –º–µ—Ç–æ–∫ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—É 1 (–∏–º—è –º–µ—Ç–∫–∏)
                if tag == 'label' and match.groups():
                    label_start = match.start(1)
                    label_end = match.end(1)
                    start_pos = f'{line_num}.{label_start}'
                    end_pos = f'{line_num}.{label_end}'
                
                self.text_widget.tag_add(tag, start_pos, end_pos)
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.highlight_context_dependent(line_num, line_content)
    
    def highlight_context_dependent(self, line_num, line_content):
        """–ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        self.highlight_syntax_errors(line_num, line_content)
        
        # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –º–µ—Ç–æ–∫
        self.highlight_unused_labels(line_num, line_content)
    
    def highlight_syntax_errors(self, line_num, line_content):
        """–ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫"""
        line = line_content.strip()
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if line.startswith(';') or not line:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –æ—à–∏–±–∫–∏
        errors = []
        
        # –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
        if re.match(r'^\s*[0-9]', line) and ':' not in line:
            errors.append("–°—Ç—Ä–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Ü–∏—Ñ—Ä—ã")
        
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∫–æ–±–æ–∫
        brackets = line.count('[') - line.count(']')
        if brackets != 0:
            errors.append("–ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫–æ–±–∫–∏")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É
        if errors:
            start_pos = f'{line_num}.0'
            end_pos = f'{line_num}.end'
            self.text_widget.tag_add('error', start_pos, end_pos)
    
    def highlight_unused_labels(self, line_num, line_content):
        """–ü–æ–¥—Å–≤–µ—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –º–µ—Ç–æ–∫ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–≥–æ –∫–æ–¥–∞
        pass
    
    def update_colors(self, theme_settings):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        color_mapping = {
            'keyword': theme_settings.get('keyword_color', '#569cd6'),
            'register': theme_settings.get('register_color', '#9cdcfe'),
            'number': theme_settings.get('number_color', '#b5cea8'),
            'string': theme_settings.get('string_color', '#ce9178'),
            'comment': theme_settings.get('comment_color', '#6a9955'),
            'label': theme_settings.get('label_color', '#dcdcaa'),
            'directive': theme_settings.get('directive_color', '#c586c0'),
            'operator': theme_settings.get('operator_color', '#d4d4d4'),
            'error': theme_settings.get('error_color', '#f44747'),
            'address': theme_settings.get('address_color', '#4fc1ff'),
        }
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ —Ü–≤–µ—Ç–∞
        for tag_name, color in color_mapping.items():
            if tag_name in self.colors:
                self.colors[tag_name] = color
                self.text_widget.tag_configure(tag_name, foreground=color)
    
    def add_custom_pattern(self, pattern, tag_name, color):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞"""
        try:
            compiled_pattern = re.compile(pattern, re.IGNORECASE | re.MULTILINE)
            self.compiled_patterns.append((compiled_pattern, tag_name))
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–≥ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if tag_name not in self.colors:
                self.colors[tag_name] = color
                self.text_widget.tag_configure(tag_name, foreground=color)
            
            print(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern} -> {tag_name}")
        except re.error as e:
            print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ {pattern}: {e}")
    
    def remove_custom_pattern(self, pattern):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞"""
        self.compiled_patterns = [
            (p, t) for p, t in self.compiled_patterns 
            if p.pattern != pattern
        ]
    
    def get_syntax_info(self, position):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        tags = self.text_widget.tag_names(position)
        
        syntax_info = {
            'position': position,
            'tags': list(tags),
            'type': None,
            'description': ''
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞
        if 'keyword' in tags:
            syntax_info['type'] = 'instruction'
            syntax_info['description'] = '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞'
        elif 'register' in tags:
            syntax_info['type'] = 'register'
            syntax_info['description'] = '–†–µ–≥–∏—Å—Ç—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞'
        elif 'number' in tags:
            syntax_info['type'] = 'number'
            syntax_info['description'] = '–ß–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ'
        elif 'label' in tags:
            syntax_info['type'] = 'label'
            syntax_info['description'] = '–ú–µ—Ç–∫–∞'
        elif 'directive' in tags:
            syntax_info['type'] = 'directive'
            syntax_info['description'] = '–î–∏—Ä–µ–∫—Ç–∏–≤–∞ –∞—Å—Å–µ–º–±–ª–µ—Ä–∞'
        elif 'comment' in tags:
            syntax_info['type'] = 'comment'
            syntax_info['description'] = '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'
        elif 'address' in tags:
            syntax_info['type'] = 'address'
            syntax_info['description'] = '–ê–¥—Ä–µ—Å–∞—Ü–∏—è –ø–∞–º—è—Ç–∏'
        
        return syntax_info
    
    def highlight_matching_brackets(self, position):
        """–ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–∫–æ–±–æ–∫"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        char = self.text_widget.get(position)
        
        if char in '[](){}':
            # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å–∫–æ–±–∫—É
            matching_pos = self.find_matching_bracket(position, char)
            
            if matching_pos:
                # –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –æ–±–µ —Å–∫–æ–±–∫–∏
                self.text_widget.tag_remove('matching_bracket', '1.0', 'end')
                self.text_widget.tag_add('matching_bracket', position)
                self.text_widget.tag_add('matching_bracket', matching_pos)
                self.text_widget.tag_configure('matching_bracket', 
                                             background='#555555', foreground='#ffffff')
    
    def find_matching_bracket(self, position, bracket):
        """–ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å–∫–æ–±–∫–∏"""
        bracket_pairs = {'[': ']', '(': ')', '{': '}', ']': '[', ')': '(', '}': '{'}
        matching_bracket = bracket_pairs.get(bracket)
        
        if not matching_bracket:
            return None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        if bracket in '[({':
            direction = 1  # –ò—â–µ–º –≤–ø–µ—Ä–µ–¥
            start_pos = f"{position}+1c"
            end_pos = 'end'
        else:
            direction = -1  # –ò—â–µ–º –Ω–∞–∑–∞–¥
            start_pos = f"{position}-1c"
            end_pos = '1.0'
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ (–±–µ–∑ —É—á–µ—Ç–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏)
        content = self.text_widget.get(start_pos, end_pos)
        
        for i, char in enumerate(content):
            if char == matching_bracket:
                if direction == 1:
                    return f"{position}+{i+1}c"
                else:
                    return f"{position}-{len(content)-i}c"
        
        return None
