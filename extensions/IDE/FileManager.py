import os
import shutil
import re
from tkinter import messagebox

class FileManager:
    def __init__(self, ide):
        self.ide = ide
        self.project_root = self.find_project_root()
        self.imports_cache = {}
        
        print(f"üìÅ –§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"üìÇ –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞: {self.project_root}")
    
    def find_project_root(self):
        """–ü–æ–∏—Å–∫ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ PC Builder"""
        current_dir = os.path.dirname(os.path.abspath(__file__))
        
        # –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –≤–≤–µ—Ä—Ö –¥–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
        while current_dir != os.path.dirname(current_dir):
            # –ò—â–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã/–ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
            if (os.path.exists(os.path.join(current_dir, 'cpu')) and
                os.path.exists(os.path.join(current_dir, 'devices')) and
                os.path.exists(os.path.join(current_dir, 'api'))):
                return current_dir
            current_dir = os.path.dirname(current_dir)
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        return os.getcwd()
    
    def resolve_imports(self, file_path):
        """–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        temp_dir = os.path.join(os.path.dirname(file_path), '.temp')
        os.makedirs(temp_dir, exist_ok=True)
        
        # –ß–∏—Ç–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
        with open(file_path, 'r', encoding='utf-8') as f:
            main_content = f.read()
        
        # –ò—â–µ–º –¥–∏—Ä–µ–∫—Ç–∏–≤—ã –∏–º–ø–æ—Ä—Ç–∞
        imports = self.find_imports(main_content)
        
        if not imports:
            # –ù–µ—Ç –∏–º–ø–æ—Ä—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            return file_path
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        merged_file = os.path.join(temp_dir, f"merged_{os.path.basename(file_path)}")
        
        try:
            self.create_merged_file(file_path, merged_file, imports)
            print(f"üì¶ –°–æ–∑–¥–∞–Ω –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {merged_file}")
            return merged_file
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            return file_path
    
    def find_imports(self, content):
        """–ü–æ–∏—Å–∫ –¥–∏—Ä–µ–∫—Ç–∏–≤ –∏–º–ø–æ—Ä—Ç–∞ –≤ –∫–æ–¥–µ"""
        imports = []
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
        import_patterns = [
            r'#include\s+"([^"]+)"',      # #include "file.asm"
            r'#import\s+"([^"]+)"',       # #import "file.asm"
            r';import\s+([^\s;]+)',       # ;import file.asm
        ]
        
        for pattern in import_patterns:
            matches = re.finditer(pattern, content, re.IGNORECASE)
            for match in matches:
                import_path = match.group(1)
                imports.append({
                    'path': import_path,
                    'line': content[:match.start()].count('\n') + 1,
                    'full_match': match.group(0)
                })
        
        return imports
    
    def create_merged_file(self, main_file, output_file, imports):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        main_dir = os.path.dirname(main_file)
        
        # –ß–∏—Ç–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
        with open(main_file, 'r', encoding='utf-8') as f:
            main_content = f.read()
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Å–µ—Ö –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
        imported_contents = []
        processed_files = set()  # –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        
        for import_info in imports:
            import_path = import_info['path']
            
            # –†–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
            if not os.path.isabs(import_path):
                full_import_path = os.path.join(main_dir, import_path)
            else:
                full_import_path = import_path
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å
            full_import_path = os.path.normpath(full_import_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã
            if full_import_path in processed_files:
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç: {import_path}")
                continue
            
            # –ß–∏—Ç–∞–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–π —Ñ–∞–π–ª
            if os.path.exists(full_import_path):
                try:
                    with open(full_import_path, 'r', encoding='utf-8') as f:
                        import_content = f.read()
                    
                    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º–æ–º —Ñ–∞–π–ª–µ
                    nested_imports = self.find_imports(import_content)
                    if nested_imports:
                        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
                        temp_file = os.path.join(os.path.dirname(output_file), 
                                               f"temp_{os.path.basename(full_import_path)}")
                        self.create_merged_file(full_import_path, temp_file, nested_imports)
                        
                        with open(temp_file, 'r', encoding='utf-8') as f:
                            import_content = f.read()
                        
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        os.remove(temp_file)
                    
                    # –£–¥–∞–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–∏–≤—ã –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
                    import_content = self.remove_import_directives(import_content)
                    
                    imported_contents.append({
                        'path': import_path,
                        'content': import_content,
                        'comment': f"; === –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ {import_path} ===\n"
                    })
                    
                    processed_files.add(full_import_path)
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {full_import_path}: {e}")
            else:
                print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {full_import_path}")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(output_file, 'w', encoding='utf-8') as f:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            f.write("; ===================================================\n")
            f.write("; –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª\n")
            f.write(f"; –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª: {os.path.basename(main_file)}\n")
            f.write(f"; –ò–º–ø–æ—Ä—Ç–æ–≤: {len(imported_contents)}\n")
            f.write("; ===================================================\n\n")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª (–±–µ–∑ –¥–∏—Ä–µ–∫—Ç–∏–≤ –∏–º–ø–æ—Ä—Ç–∞)
            main_content_clean = self.remove_import_directives(main_content)
            f.write(main_content_clean)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            for import_info in imported_contents:
                f.write(f"\n\n{import_info['comment']}")
                f.write(import_info['content'])
                f.write(f"\n; === –ö–æ–Ω–µ—Ü –∏–º–ø–æ—Ä—Ç–∞ {import_info['path']} ===\n")
    
    def remove_import_directives(self, content):
        """–£–¥–∞–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–∏–≤ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"""
        lines = content.split('\n')
        filtered_lines = []
        
        import_patterns = [
            r'#include\s+"[^"]+"',
            r'#import\s+"[^"]+"',
            r';import\s+\S+',
        ]
        
        for line in lines:
            is_import = False
            for pattern in import_patterns:
                if re.search(pattern, line, re.IGNORECASE):
                    is_import = True
                    break
            
            if not is_import:
                filtered_lines.append(line)
            else:
                # –ó–∞–º–µ–Ω—è–µ–º –¥–∏—Ä–µ–∫—Ç–∏–≤—É –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                filtered_lines.append(f"; {line.strip()} (—É–¥–∞–ª–µ–Ω–æ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏)")
        
        return '\n'.join(filtered_lines)
    
    def cleanup_temp_files(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        temp_dirs = []
        
        # –ò—â–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if hasattr(self.ide, 'current_file') and self.ide.current_file:
            file_dir = os.path.dirname(self.ide.current_file)
            temp_dir = os.path.join(file_dir, '.temp')
            if os.path.exists(temp_dir):
                temp_dirs.append(temp_dir)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for temp_dir in temp_dirs:
            try:
                shutil.rmtree(temp_dir)
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {temp_dir}")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {temp_dir}: {e}")
    
    def create_project_template(self, project_path, project_name):
        """–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            os.makedirs(project_path, exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–ø–∫–∏
            folders = ['src', 'include', 'build', 'docs']
            for folder in folders:
                os.makedirs(os.path.join(project_path, folder), exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
            main_file = os.path.join(project_path, 'src', 'main.asm')
            with open(main_file, 'w', encoding='utf-8') as f:
                f.write(f"""; {project_name} - –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª
; –°–æ–∑–¥–∞–Ω–æ: {__import__('datetime').datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

#org 0x0300
jmp main

main:
    ; –û—á–∏—Å—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
    xor a, a
    xor b, b
    xor c, c
    xor d, d
    
    ; –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–µ–∫–∞
    mov sp, 0xFF
    mov bp, 0xFF
    mov ss, 0x00
    
    ; TODO: –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–¥ –∑–¥–µ—Å—å
    
    hlt

; === –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ ===

; TODO: –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏

; === –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ ===

; TODO: –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
""")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª README
            readme_file = os.path.join(project_path, 'README.md')
            with open(readme_file, 'w', encoding='utf-8') as f:
                f.write(f"""# {project_name}

–ü—Ä–æ–µ–∫—Ç –¥–ª—è PC Builder - 8-–±–∏—Ç–Ω–æ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞.

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

- `src/` - –ò—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –∞—Å—Å–µ–º–±–ª–µ—Ä–∞
- `include/` - –ü–æ–¥–∫–ª—é—á–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã
- `build/` - –°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
- `docs/` - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

## –°–±–æ—Ä–∫–∞

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ PC Builder IDE –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.

## –û–ø–∏—Å–∞–Ω–∏–µ

TODO: –û–ø–∏—à–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç
""")
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω –ø—Ä–æ–µ–∫—Ç–∞: {project_path}")
            return main_file
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {e}")
            return None
    
    def find_asm_files(self, directory):
        """–ü–æ–∏—Å–∫ –≤—Å–µ—Ö .asm —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        asm_files = []
        
        try:
            for root, dirs, files in os.walk(directory):
                for file in files:
                    if file.endswith('.asm'):
                        full_path = os.path.join(root, file)
                        rel_path = os.path.relpath(full_path, directory)
                        asm_files.append({
                            'name': file,
                            'path': full_path,
                            'relative_path': rel_path,
                            'size': os.path.getsize(full_path)
                        })
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}")
        
        return asm_files
    
    def backup_file(self, file_path):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ñ–∞–π–ª–∞"""
        if not os.path.exists(file_path):
            return None
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –±—ç–∫–∞–ø–æ–≤
            backup_dir = os.path.join(os.path.dirname(file_path), '.backups')
            os.makedirs(backup_dir, exist_ok=True)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –±—ç–∫–∞–ø–∞ —Å timestamp
            timestamp = __import__('datetime').datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = os.path.basename(file_path)
            backup_name = f"{filename}.{timestamp}.bak"
            backup_path = os.path.join(backup_dir, backup_name)
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
            shutil.copy2(file_path, backup_path)
            
            print(f"üíæ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup_path}")
            return backup_path
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
            return None
    
    def get_file_info(self, file_path):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ"""
        if not os.path.exists(file_path):
            return None
        
        try:
            stat = os.stat(file_path)
            
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            lines = content.split('\n')
            code_lines = 0
            comment_lines = 0
            empty_lines = 0
            
            for line in lines:
                stripped = line.strip()
                if not stripped:
                    empty_lines += 1
                elif stripped.startswith(';'):
                    comment_lines += 1
                else:
                    code_lines += 1
            
            # –ü–æ–∏—Å–∫ –º–µ—Ç–æ–∫ –∏ —Ñ—É–Ω–∫—Ü–∏–π
            labels = len(re.findall(r'^\s*([a-zA-Z_\.][a-zA-Z0-9_\.]*)\s*:', content, re.MULTILINE))
            
            return {
                'path': file_path,
                'size': stat.st_size,
                'modified': stat.st_mtime,
                'lines_total': len(lines),
                'lines_code': code_lines,
                'lines_comments': comment_lines,
                'lines_empty': empty_lines,
                'labels_count': labels,
                'encoding': 'utf-8'
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: {e}")
            return None
