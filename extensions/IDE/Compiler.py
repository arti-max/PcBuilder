import os
import sys
import re
import subprocess
import threading
from tkinter import messagebox

class CompilerIntegration:
    def __init__(self, ide):
        self.ide = ide
        self.is_compiling = False
        self.compile_thread = None
        
        # –ü—É—Ç—å –∫ –∞—Å—Å–µ–º–±–ª–µ—Ä—É (—Å —É—á–µ—Ç–æ–º —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã)
        self.default_assembler_path = os.path.join('..', 'asm', 'Assembler.py')
        
        print("üîß –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def get_assembler_path(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –∞—Å—Å–µ–º–±–ª–µ—Ä—É"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = self.ide.settings.load_settings()
        custom_path = settings.get('compiler', {}).get('path', '')
        
        if custom_path and os.path.exists(custom_path):
            return custom_path
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ø—É—Ç–∏ —Å —É—á–µ—Ç–æ–º —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
        possible_paths = [
            # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ IDE (extensions/IDE/) -> extensions/asm/
            os.path.join(os.path.dirname(__file__), '..', 'asm', 'Assembler.py'),
            # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –æ—Ç –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
            os.path.join(os.path.dirname(__file__), '..', '..', 'extensions', 'asm', 'Assembler.py'),
            # –ü–æ–∏—Å–∫ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            os.path.join(os.path.dirname(__file__), '..', '..', '..', 'extensions', 'asm', 'Assembler.py'),
        ]
        
        for path in possible_paths:
            abs_path = os.path.abspath(path)
            print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å: {abs_path}")
            if os.path.exists(abs_path):
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∞—Å—Å–µ–º–±–ª–µ—Ä: {abs_path}")
                return abs_path
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        return self._find_assembler_automatically()
    
    def _find_assembler_automatically(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∞—Å—Å–µ–º–±–ª–µ—Ä–∞"""
        # –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ IDE
        current_dir = os.path.dirname(__file__)
        
        # –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –¥–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∏—â–µ–º
        search_paths = [
            current_dir,
            os.path.join(current_dir, '..'),
            os.path.join(current_dir, '..', '..'),
            os.path.join(current_dir, '..', '..', '..'),
        ]
        
        for search_dir in search_paths:
            abs_search_dir = os.path.abspath(search_dir)
            print(f"üîç –ü–æ–∏—Å–∫ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {abs_search_dir}")
            
            # –ò—â–µ–º —Ñ–∞–π–ª Assembler.py —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
            for root, dirs, files in os.walk(abs_search_dir):
                if 'Assembler.py' in files:
                    assembler_path = os.path.join(root, 'Assembler.py')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞—Å—Å–µ–º–±–ª–µ—Ä (–µ—Å—Ç—å —Ä—è–¥–æ–º Lexer.py –∏ Parser.py)
                    if (os.path.exists(os.path.join(root, 'Lexer.py')) and
                        os.path.exists(os.path.join(root, 'Parser.py'))):
                        print(f"üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–Ω –∞—Å—Å–µ–º–±–ª–µ—Ä: {assembler_path}")
                        return assembler_path
        
        print("‚ùå –ê—Å—Å–µ–º–±–ª–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    def compile_file(self, file_path, output_type="bin", output_path=None, metadata=None):
        """–ö–æ–º–ø–∏–ª—è—Ü–∏—è —Ñ–∞–π–ª–∞"""
        if self.is_compiling:
            self.ide.update_status("‚ö†Ô∏è –ö–æ–º–ø–∏–ª—è—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
            return

        assembler_path = self.get_assembler_path()
        if not assembler_path:
            messagebox.showerror("–û—à–∏–±–∫–∞", 
                            "–ê—Å—Å–µ–º–±–ª–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—É—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
            return

        # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        settings = self.ide.settings.load_settings()
        if settings.get('compiler', {}).get('auto_save_before_compile', True):
            if self.ide.is_modified:
                self.ide.save_file()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
        try:
            processed_file = self.ide.file_manager.resolve_imports(file_path)
        except Exception as e:
            self.ide.update_status(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤: {e}")
            return

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö –ø—É—Ç–µ–π
        compile_params = {
            'file_path': processed_file,
            'output_type': output_type,
            'metadata': metadata,
            'output_path': output_path,
            'is_merged': file_path != processed_file
        }

        # –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.is_compiling = True
        self.compile_thread = threading.Thread(
            target=self._compile_worker,
            args=(compile_params,)
        )
        self.compile_thread.daemon = True
        self.compile_thread.start()
    
    def _compile_worker(self, params):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏"""
        try:
            self.ide.update_status("üîß –ö–æ–º–ø–∏–ª—è—Ü–∏—è...")
            
            file_path = params['file_path']
            output_type = params['output_type']
            metadata = params['metadata']
            output_path = params['output_path']
            is_merged = params['is_merged']
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã
            cmd = [sys.executable, self.get_assembler_path(), file_path]
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤—ã–≤–æ–¥–∞
            if output_type == "tape":
                cmd.append("--tape")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
                if metadata is None:
                    filename = os.path.splitext(os.path.basename(file_path))[0]
                    metadata = {
                        'name': filename,
                        'author': 'PC Builder IDE',
                        'description': f'Compiled from {filename}'
                    }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–º–∞–Ω–¥—É
                if 'name' in metadata:
                    cmd.extend(['--name', metadata['name']])
                if 'author' in metadata:
                    cmd.extend(['--author', metadata['author']])
                if 'description' in metadata:
                    cmd.extend(['--description', metadata['description']])
                
                    
            elif output_type == "both":
                cmd.append("--both")
                
                # –î–ª—è "both" —Ç–æ–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                if metadata:
                    if 'name' in metadata:
                        cmd.extend(['--name', metadata['name']])
                    if 'author' in metadata:
                        cmd.extend(['--author', metadata['author']])
                    if 'description' in metadata:
                        cmd.extend(['--description', metadata['description']])
            
            # –î–ª—è BIN –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            # —Ç–∞–∫ –∫–∞–∫ –≤—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è 0.bin –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ 1.bin
            cmd.extend(['--output', output_path])
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            cmd.append("--info")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–ø–∏–ª—è—Ü–∏—é
            print(f"üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {' '.join(cmd)}")
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                cwd=os.path.dirname(file_path)
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.ide.root.after(0, self._handle_compile_result, result, output_type, is_merged)
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏: {e}"
            self.ide.root.after(0, self.ide.update_status, error_msg)
            self.ide.root.after(0, self._compilation_finished)
    
    def _handle_compile_result(self, result, output_type, is_merged):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏"""
        try:
            if result.returncode == 0:
                # –£—Å–ø–µ—à–Ω–∞—è –∫–æ–º–ø–∏–ª—è—Ü–∏—è
                output_info = self._parse_compile_output(result.stdout)
                
                if output_type == "bin":
                    success_msg = "‚úÖ BIN —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ"
                    if output_info:
                        success_msg += f" ({output_info})"
                    success_msg += " (0.bin –∏ –≤–æ–∑–º–æ–∂–Ω–æ 1.bin –≤ –ø–∞–ø–∫–µ bios/)"
                elif output_type == "tape":
                    success_msg = "‚úÖ TAPE –∫–∞—Å—Å–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
                    if output_info:
                        success_msg += f" ({output_info})"
                else:  # both
                    success_msg = "‚úÖ BIN –∏ TAPE —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ"
                    if output_info:
                        success_msg += f" ({output_info})"
                
                self.ide.update_status(success_msg)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                if result.stdout:
                    self._show_compile_output("–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–ø–∏–ª—è—Ü–∏–∏", result.stdout, "info")
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å
                if is_merged:
                    self.ide.file_manager.cleanup_temp_files()
                    
            else:
                # –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
                error_msg = "‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏"
                if result.stderr:
                    error_msg += f": {result.stderr.strip()}"
                
                self.ide.update_status(error_msg)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
                error_output = result.stderr or result.stdout or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                self._show_compile_output("–û—à–∏–±–∫–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏", error_output, "error")
                
        except Exception as e:
            self.ide.update_status(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
        finally:
            self._compilation_finished()
    
    def _parse_compile_output(self, output):
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–≤–æ–¥–∞ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞"""
        info = {}
        
        # –ò—â–µ–º —Ä–∞–∑–º–µ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã
        size_match = re.search(r'–†–∞–∑–º–µ—Ä: (\d+) –±–∞–π—Ç', output)
        if size_match:
            info['size'] = int(size_match.group(1))
        
        # –ò—â–µ–º –∞–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏
        addr_match = re.search(r'–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: 0x([0-9A-Fa-f]+)', output)
        if addr_match:
            info['load_address'] = addr_match.group(1)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if info:
            parts = []
            if 'size' in info:
                parts.append(f"{info['size']} –±–∞–π—Ç")
            if 'load_address' in info:
                parts.append(f"@0x{info['load_address']}")
            return ", ".join(parts)
        
        return None
    
    def _show_compile_output(self, title, content, output_type="info"):
        """–ü–æ–∫–∞–∑ –≤—ã–≤–æ–¥–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏"""
        import tkinter as tk
        from tkinter import scrolledtext
        
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞
        output_window = tk.Toplevel(self.ide.root)
        output_window.title(title)
        output_window.geometry("600x400")
        output_window.configure(bg='#2b2b2b')
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        text_widget = scrolledtext.ScrolledText(
            output_window,
            bg='#1e1e1e' if output_type == "info" else '#2d1b1b',
            fg='#ffffff' if output_type == "info" else '#ff6b6b',
            insertbackground='white',
            font=('Consolas', 10),
            wrap=tk.WORD
        )
        text_widget.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        text_widget.insert('1.0', content)
        text_widget.config(state=tk.DISABLED)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_button = tk.Button(
            output_window,
            text="–ó–∞–∫—Ä—ã—Ç—å",
            bg='#4c4c4c',
            fg='white',
            border=0,
            command=output_window.destroy
        )
        close_button.pack(pady=5)
        
        # –§–æ–∫—É—Å –Ω–∞ –æ–∫–Ω–µ
        output_window.focus_set()
    
    def _compilation_finished(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏"""
        self.is_compiling = False
        self.compile_thread = None
    
    def stop_compilation(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏"""
        if self.is_compiling and self.compile_thread:
            # –í Python —Å–ª–æ–∂–Ω–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ç–æ–∫
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ —Ñ–ª–∞–≥–∏
            self.ide.update_status("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏...")
    
    def get_supported_formats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤—ã–≤–æ–¥–∞"""
        return ["bin", "tape", "both"]
    
    def validate_file_before_compile(self, file_path):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –∫–æ–º–ø–∏–ª—è—Ü–∏–µ–π"""
        errors = []
        warnings = []
        
        if not os.path.exists(file_path):
            errors.append("–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return errors, warnings
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
            lines = content.split('\n')
            
            for line_num, line in enumerate(lines, 1):
                stripped_line = line.strip()
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                if not stripped_line or stripped_line.startswith(';'):
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                if any(ord(char) > 127 for char in stripped_line):
                    warnings.append(f"–°—Ç—Ä–æ–∫–∞ {line_num}: –ù–µ-ASCII —Å–∏–º–≤–æ–ª—ã")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ —Å–∫–æ–±–æ–∫
                if stripped_line.count('[') != stripped_line.count(']'):
                    errors.append(f"–°—Ç—Ä–æ–∫–∞ {line_num}: –ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫–æ–±–∫–∏")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –º–µ—Ç–æ–∫
                if ':' in stripped_line and not stripped_line.startswith('#'):
                    label_part = stripped_line.split(':')[0].strip()
                    if ' ' in label_part or '\t' in label_part:
                        errors.append(f"–°—Ç—Ä–æ–∫–∞ {line_num}: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –º–µ—Ç–∫–∏")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞
            if '#org' not in content.lower() and 'main:' not in content.lower():
                warnings.append("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ (#org –∏–ª–∏ main:)")
                
        except Exception as e:
            errors.append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        
        return errors, warnings
    
    def get_compile_statistics(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–π
        return {
            'total_compilations': 0,
            'successful_compilations': 0,
            'failed_compilations': 0,
            'average_compile_time': 0
        }
